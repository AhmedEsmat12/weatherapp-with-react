{"version":3,"sources":["component/weather.js","component/form.js","App.js","serviceWorker.js","index.js"],"names":["Weather","react_default","a","createElement","this","props","temparature","city","country","humditity","description","error","Component","Form","onSubmit","GetWeather","type","name","placeholder","App","state","_callee","e","api","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","humidity","weather","stop","className","component_form","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAkBeA,0LAZP,OACIC,EAAAC,EAAAC,cAAA,WACKC,KAAKC,MAAMC,aAAcL,EAAAC,EAAAC,cAAA,0BAAkBC,KAAKC,MAAMC,aACtDF,KAAKC,MAAME,MAAON,EAAAC,EAAAC,cAAA,mBAAWC,KAAKC,MAAME,MACxCH,KAAKC,MAAMG,SAAUP,EAAAC,EAAAC,cAAA,sBAAcC,KAAKC,MAAMG,SAC9CJ,KAAKC,MAAMI,WAAYR,EAAAC,EAAAC,cAAA,wBAAgBC,KAAKC,MAAMI,WAClDL,KAAKC,MAAMK,aAAcT,EAAAC,EAAAC,cAAA,yBAAiBC,KAAKC,MAAMK,aACrDN,KAAKC,MAAMM,OAAQV,EAAAC,EAAAC,cAAA,mBAAWC,KAAKC,MAAMM,eAVpCC,cCSPC,EATH,SAACR,GACT,OACQJ,EAAAC,EAAAC,cAAA,QAAMW,SAAUT,EAAMU,YAClBd,EAAAC,EAAAC,cAAA,SAAOa,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3CjB,EAAAC,EAAAC,cAAA,SAAOa,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9CjB,EAAAC,EAAAC,cAAA,+BCwDDgB,6MAzDbC,MAAM,CACJd,YAAY,GACZC,KAAK,GACLC,QAAQ,GACRC,UAAU,GACVC,YAAY,GACZC,MAAM,MAEPI,iDAAY,SAAAM,EAAMC,GAAN,IAAAf,EAAAC,EAAAe,EAAAC,EAAA,OAAAC,EAAAvB,EAAAwB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEXP,EAAEQ,iBACIvB,EAAKe,EAAES,OAAOC,SAASzB,KAAK0B,MAC5BzB,EAAQc,EAAES,OAAOC,SAASxB,QAAQyB,MAJ7BN,EAAAE,KAAA,EAKKK,MAAK,oDAAAC,OAAqD5B,EAArD,KAAA4B,OAA6D3B,EAA7D,4CALV,cAKLe,EALKI,EAAAS,KAAAT,EAAAE,KAAA,EAMMN,EAAIc,OANV,OAMLb,EANKG,EAAAS,KAOXE,QAAQC,IAAIf,GACTjB,GAAMC,EAETgC,EAAKC,SAAS,CACZnC,YAAYkB,EAAKkB,KAAKC,KACtBpC,KAAKiB,EAAKP,KACVT,QAAQgB,EAAKoB,IAAIpC,QACjBC,UAAUe,EAAKkB,KAAKG,SACpBnC,YAAYc,EAAKsB,QAAQ,GAAGpC,YAC5BC,MAAM,KAKR6B,EAAKC,SAAS,CACZnC,YAAY,GACZC,KAAK,GACLC,QAAQ,GACRC,UAAU,GACVC,YAAY,GACZC,MAAM,sBA3BG,yBAAAgB,EAAAoB,SAAA1B,oIAiCb,OACEpB,EAAAC,EAAAC,cAAA,OAAK6C,UAAU,OACb/C,EAAAC,EAAAC,cAAC8C,EAAD,CAAMlC,WAAYX,KAAKW,aAC1Bd,EAAAC,EAAAC,cAAC2C,EAAD,CACAxC,YAAaF,KAAKgB,MAAMd,YACxBC,KAAMH,KAAKgB,MAAMb,KACjBC,QAASJ,KAAKgB,MAAMZ,QACpBC,UAAWL,KAAKgB,MAAMX,UACtBC,YAAaN,KAAKgB,MAAMV,YACxBC,MAAOP,KAAKgB,MAAMT,gBAnDHuC,IAAMtC,WCMJuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4433dce0.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\n\r\n\r\nclass Weather extends Component{\r\n    render()\r\n    { \r\n        return(\r\n            <div>\r\n                {this.props.temparature&& <p>temparature : {this.props.temparature}</p>}\r\n                {this.props.city&& <p>city : {this.props.city}</p>}\r\n                {this.props.country&& <p>country : {this.props.country}</p>}\r\n                {this.props.humditity&& <p>humditity : {this.props.humditity}</p>}\r\n                {this.props.description&& <p>description: {this.props.description}</p>}\r\n                {this.props.error&& <p>error: {this.props.error}</p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Weather","import React,{Component} from 'react'\r\n\r\n\r\nconst Form =(props)=>{\r\n    return(\r\n            <form onSubmit={props.GetWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"City...\" /> \r\n                <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n                <button>get weather</button>\r\n            </form>\r\n        )\r\n    }\r\nexport default Form","import React from 'react';\nimport './App.css';\nimport Weather from './component/weather'\nimport Form from './component/form'\n// const key=\"09eedc7a8b0d7b6572c3ece41df7e320\";\n//http://api.openweathermap.org/data/2.5/weather?q=cairo,egypt&appid=e36ed364400282e43250b6c4c0274d44\nclass App extends React.Component {\n  state={\n    temparature:\"\",\n    city:\"\",\n    country:\"\",\n    humditity:\"\",\n    description:\"\",\n    error:\"\"\n  }\n   GetWeather= async(e)=>\n  {\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n    const api=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=e36ed364400282e43250b6c4c0274d44`)\n    const data=await api.json();\n    console.log(data);\n    if(city&&country)\n    {\n    this.setState({\n      temparature:data.main.temp,\n      city:data.name,\n      country:data.sys.country,\n      humditity:data.main.humidity,\n      description:data.weather[0].description,  \n      error:\"\"\n    })\n  }\n  else\n  {\n    this.setState({\n      temparature:\"\",\n      city:\"\",\n      country:\"\",\n      humditity:\"\",\n      description:\"\",\n      error:\"please enter data\"\n    }) \n  }\n}\n  render()\n  {\n  return (\n    <div className=\"App\">\n      <Form GetWeather={this.GetWeather} />\n   <Weather\n   temparature={this.state.temparature}\n   city={this.state.city}\n   country={this.state.country}\n   humditity={this.state.humditity}\n   description={this.state.description}\n   error={this.state.error}\n   />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}